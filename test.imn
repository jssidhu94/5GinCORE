node n1 {
    type router
    model host
    network-config {
	hostname mySQL
	!
	interface eth0
	 ip address 192.168.70.131/24
	!
    }
    canvas c1
    iconcoords {577.0 233.0}
    labelcoords {579.0 214.0}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	#gnome-terminal
	cp /home/core/5GinCORE/ . -r
	
	
	}
    }
    custom-config {
	custom-config-id service:Docker
	custom-command Docker
	config {
	files=('startdocker.sh', 'stopdocker.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker:startdocker.sh
	custom-command startdocker.sh
	config {
	#!/bin/sh
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 1
	docker-compose -f ./5GinCORE/5GCN/mysql.yaml up -d
	}
    }
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 2
	docker-compose -f ./oai-cn5g-fed/docker-compose/mysql.yaml up -d
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.2.0/24 via 192.168.1.2 dev eth0 
	
	}
    }
    services {Docker UserDefined}
    interface-peer {eth0 n3}
}

node n2 {
    type router
    model host
    network-config {
	hostname UPF
	!
	interface eth2
	 ipv6 address 2001:3::10/64
	 ip address 192.168.73.134/24
	!
	interface eth1
	 ipv6 address 2001:1::10/64
	 ip address 192.168.72.134/24
	!
	interface eth0
	 ip address 192.168.70.134/24
	!
    }
    canvas c1
    iconcoords {768.0 657.0}
    labelcoords {769.0 696.0}
    custom-config {
	custom-config-id service:Docker
	custom-command Docker
	config {
	files=('startdocker.sh', 'stopdocker.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker:startdocker.sh
	custom-command startdocker.sh
	config {
	#!/bin/sh
	sleep 24
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 1
	docker-compose -f ./5GinCORE/5GCN/upf_m.yaml up -d
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	#gnome-terminal
	cp /home/core/5GinCORE/ . -r
	
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.60.0/24 via 192.168.72.141 dev n3
	
	}
    }
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 65
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 5
	docker-compose -f ./oai-cn5g-fed/docker-compose/upf.yaml up -d
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    services {Docker UserDefined}
    interface-peer {eth0 n3}
    interface-peer {eth1 n19}
    interface-peer {eth2 n10}
}

node n3 {
    type lanswitch
    network-config {
	hostname Switch
	!
    }
    canvas c1
    iconcoords {767.0 368.0}
    labelcoords {767.0 392.0}
    interface-peer {e0 n1}
    interface-peer {e1 n2}
    interface-peer {e2 n4}
    interface-peer {e3 n5}
    interface-peer {e4 n6}
    interface-peer {e5 n7}
    interface-peer {e6 n8}
    interface-peer {e7 n9}
    interface-peer {e9 n11}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('wireshark.sh', )
	startidx=50
	cmdup=('bash wireshark.sh', )
	meta=
	starttime=
	}
    }
    custom-config {
	custom-config-id service:UserDefined:wireshark.sh
	custom-command wireshark.sh
	config {
	wireshark &
	}
    }
    services {UserDefined}
    interface-peer {e8 n13}
    interface-peer {e10 n14}
    interface-peer {e11 n15}
    interface-peer {e12 n16}
}

node n4 {
    type router
    model host
    network-config {
	hostname NRF
	!
	interface eth0
	 ip address 192.168.70.130/24
	!
    }
    canvas c1
    iconcoords {707.0 232.0}
    labelcoords {703.0 211.0}
    custom-config {
	custom-config-id service:Docker
	custom-command Docker
	config {
	files=('startdocker.sh', 'stopdocker.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker:startdocker.sh
	custom-command startdocker.sh
	config {
	#!/bin/sh
	sleep 4
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 1
	docker-compose -f ./5GinCORE/5GCN/nrf.yaml up -d
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	#gnome-terminal
	cp /home/core/5GinCORE/ . -r
	
	
	}
    }
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 5
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 5
	docker-compose -f ./oai-cn5g-fed/docker-compose/nrf.yaml up -d
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.2.0/24 via 192.168.1.2 dev eth0 
	
	}
    }
    services {Docker UserDefined}
    interface-peer {eth0 n3}
}

node n5 {
    type router
    model host
    network-config {
	hostname UDM
	!
	interface eth0
	 ip address 192.168.70.137/24
	!
    }
    canvas c1
    iconcoords {957.0 236.0}
    labelcoords {953.0 215.0}
    custom-config {
	custom-config-id service:Docker
	custom-command Docker
	config {
	files=('startdocker.sh', 'stopdocker.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker:startdocker.sh
	custom-command startdocker.sh
	config {
	#!/bin/sh
	sleep 14
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 1
	docker-compose -f ./5GinCORE/5GCN/udm.yaml up -d
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	#gnome-terminal
	cp /home/core/5GinCORE/ . -r
	
	
	}
    }
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 15
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 5
	docker-compose -f ./oai-cn5g-fed/docker-compose/udm.yaml up -d
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.2.0/24 via 192.168.1.2 dev eth0 
	
	}
    }
    services {Docker UserDefined}
    interface-peer {eth0 n3}
}

node n6 {
    type router
    model host
    network-config {
	hostname UDR
	!
	interface eth0
	 ip address 192.168.70.136/24
	!
    }
    canvas c1
    iconcoords {945.0 508.0}
    labelcoords {948.0 546.0}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	cp /home/core/5GinCORE/ . -r
	}
    }
    custom-config {
	custom-config-id service:Docker
	custom-command Docker
	config {
	files=('startdocker.sh', 'stopdocker.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker:startdocker.sh
	custom-command startdocker.sh
	config {
	#!/bin/sh
	sleep 9
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 1
	docker-compose -f ./5GinCORE/5GCN/udr.yaml up -d
	
	}
    }
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 25
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 5
	docker-compose -f ./oai-cn5g-fed/docker-compose/udr.yaml up -d
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.2.0/24 via 192.168.1.2 dev eth0 
	
	}
    }
    services {Docker UserDefined}
    interface-peer {eth0 n3}
}

node n7 {
    type router
    model host
    network-config {
	hostname AUSF
	!
	interface eth0
	 ip address 192.168.70.138/24
	!
    }
    canvas c1
    iconcoords {828.0 506.0}
    labelcoords {826.0 544.0}
    custom-config {
	custom-config-id service:Docker
	custom-command Docker
	config {
	files=('startdocker.sh', 'stopdocker.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker:startdocker.sh
	custom-command startdocker.sh
	config {
	#!/bin/sh
	sleep 19
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 1
	docker-compose -f ./5GinCORE/5GCN/ausf.yaml up -d
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	#gnome-terminal
	cp /home/core/5GinCORE/ . -r
	
	
	}
    }
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 35
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 5
	docker-compose -f ./oai-cn5g-fed/docker-compose/ausf.yaml up -d
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.2.0/24 via 192.168.1.2 dev eth0 
	
	}
    }
    services {Docker UserDefined}
    interface-peer {eth0 n3}
}

node n8 {
    type router
    model host
    network-config {
	hostname AMF
	!
	interface eth0
	 ip address 192.168.70.132/24
	!
    }
    canvas c1
    iconcoords {846.0 235.0}
    labelcoords {842.0 214.0}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	#gnome-terminal
	cp /home/core/5GinCORE/ . -r
	}
    }
    custom-config {
	custom-config-id service:Docker
	custom-command Docker
	config {
	files=('startdocker.sh', 'stopdocker.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker:startdocker.sh
	custom-command startdocker.sh
	config {
	#!/bin/sh
	sleep 34
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 1
	docker-compose -f ./5GinCORE/5GCN/amf.yaml up -d
	
	}
    }
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 45
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 5
	docker-compose -f ./oai-cn5g-fed/docker-compose/amf.yaml up -d
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.2.0/24 via 192.168.1.2 dev eth0 
	
	}
    }
    services {Docker UserDefined}
    interface-peer {eth0 n3}
}

node n9 {
    type router
    model host
    network-config {
	hostname SMF
	!
	interface eth0
	 ip address 192.168.70.133/24
	!
    }
    canvas c1
    iconcoords {695.0 510.0}
    labelcoords {693.0 547.0}
    custom-config {
	custom-config-id service:Docker
	custom-command Docker
	config {
	files=('startdocker.sh', 'stopdocker.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker:startdocker.sh
	custom-command startdocker.sh
	config {
	#!/bin/sh
	sleep 39
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 1
	docker-compose -f ./5GinCORE/5GCN/smf.yaml up -d
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	#gnome-terminal
	cp /home/core/5GinCORE/ . -r
	
	
	}
    }
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 55
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 5
	docker-compose -f ./oai-cn5g-fed/docker-compose/smf.yaml up -d
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.2.0/24 via 192.168.1.2 dev eth0 
	
	}
    }
    services {Docker UserDefined}
    interface-peer {eth0 n3}
}

node n10 {
    type router
    model host
    network-config {
	hostname EXT-DN
	!
	interface eth0
	 ipv6 address 2001:3::11/64
	 ip address 192.168.73.135/24
	!
    }
    canvas c1
    iconcoords {1210.0 367.0}
    labelcoords {1211.0 402.0}
    custom-config {
	custom-config-id service:Docker
	custom-command Docker
	config {
	files=('startdocker.sh', 'stopdocker.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker:startdocker.sh
	custom-command startdocker.sh
	config {
	#!/bin/sh
	sleep 29
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 1
	docker-compose -f ./5GinCORE/5GCN/dn.yaml up -d
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	#gnome-terminal
	cp /home/core/5GinCORE/ . -r
	
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.72.0/24 via 192.168.73.134 dev eth0
	ip route add 192.168.60.0/24 via 192.168.73.134 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 75
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 5
	docker-compose -f ./oai-cn5g-fed/docker-compose/dn.yaml up -d
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    services {Docker UserDefined}
    interface-peer {eth0 n2}
}

node n11 {
    type router
    model gNB
    network-config {
	hostname gNB1
	!
	interface eth1
	 ipv6 address 2001:1::1/64
	 ip address 192.168.72.141/24
	!
	interface eth2
	 ip address 10.0.0.2/32
	 ipv6 address 2001:0::2/128
	!
	interface eth0
	 ip address 192.168.70.1/24
	!
    }
    canvas c1
    iconcoords {327.0 514.0}
    labelcoords {328.0 553.0}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('ran.sh', )
	cmdup=('bash ran.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:ran.sh
	custom-command ran.sh
	config {
	cp /home/core/5GinCORE/MultiplegNBS/gNB1.yaml .
	cp /home/core/UERANSIM/ . -r
	sleep 44
	./UERANSIM/build/nr-gnb -c gNB1.yaml
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 10.0.0.2 dev eth2
	
	
	}
    }
    custom-config {
	custom-config-id service:Docker
	custom-command Docker
	config {
	files=('startdocker.sh', 'stopdocker.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker:startdocker.sh
	custom-command startdocker.sh
	config {
	#!/bin/sh
	sleep 44
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 1
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.73.0/24 via 192.168.72.134 dev eth1
	
	}
    }
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 85
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	
	}
    }
    services {DefaultRoute UserDefined}
    interface-peer {eth0 n3}
    interface-peer {eth2 n21}
    interface-peer {eth1 n19}
}

node n12 {
    type router
    model UE
    network-config {
	hostname UE1
	!
	interface eth0
	 ip address 10.0.0.1/32
	 ipv6 address 2001:0::1/128
	!
    }
    canvas c1
    iconcoords {102.0 441.0}
    labelcoords {103.0 481.0}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 10.0.0.1 dev eth0
	ip route add 10.0.0.0/24 via 10.0.0.1 dev eth0
	
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gran.sh', )
	startidx=
	cmdup=('sh 5gran.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gran.sh
	custom-command 5gran.sh
	config {
	cp /home/core/5GinCORE/MultiplegNBS/ue1.yaml .
	cp /home/core/UERANSIM/ . -r
	sleep 45
	./UERANSIM/build/nr-ue -c ue1.yaml
	}
    }
    custom-config {
	custom-config-id service:Docker
	custom-command Docker
	config {
	files=('startdocker.sh', 'stopdocker.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker:startdocker.sh
	custom-command startdocker.sh
	config {
	#!/bin/sh
	sleep 49
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 1
	}
    }
    services {DefaultRoute UserDefined}
    interface-peer {eth0 n21}
}

node n13 {
    type router
    model gNB
    network-config {
	hostname gNB2
	!
	interface eth2
	 ipv6 address 2001:1::2/64
	 ip address 192.168.72.142/24
	!
	interface eth0
	 ip address 10.0.0.4/32
	 ipv6 address 2001:0::4/128
	!
	interface eth1
	 ipv6 address 2001:2::1/64
	 ip address 192.168.70.2/24
	!
    }
    canvas c1
    iconcoords {327.0 442.0}
    labelcoords {328.0 478.0}
    interface-peer {eth1 n3}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 10.0.0.4 dev eth0
	
	
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('gnb.sh', )
	cmdup=('sh gnb.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:gnb.sh
	custom-command gnb.sh
	config {
	cp /home/core/5GinCORE/MultiplegNBS/gNB2.yaml .
	cp /home/core/UERANSIM/ . -r
	sleep 46
	./UERANSIM/build/nr-gnb -c gNB2.yaml
	}
    }
    services {DefaultRoute UserDefined}
    interface-peer {eth0 n21}
    interface-peer {eth2 n19}
}

node n14 {
    type router
    model gNB
    network-config {
	hostname gNB3
	!
	interface eth2
	 ipv6 address 2001:1::3/64
	 ip address 192.168.72.143/24
	!
	interface eth0
	 ip address 10.0.0.6/32
	 ipv6 address 2001:0::6/128
	!
	interface eth1
	 ipv6 address 2001:2::2/64
	 ip address 192.168.70.3/24
	!
    }
    canvas c1
    iconcoords {328.0 368.0}
    labelcoords {328.0 406.0}
    interface-peer {eth1 n3}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 10.0.0.6 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('gnb.sh', )
	cmdup=('sh gnb.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:gnb.sh
	custom-command gnb.sh
	config {
	cp /home/core/5GinCORE/MultiplegNBS/gNB3.yaml .
	cp /home/core/UERANSIM/ . -r
	sleep 48
	./UERANSIM/build/nr-gnb -c gNB3.yaml
	}
    }
    services {DefaultRoute UserDefined}
    interface-peer {eth0 n21}
    interface-peer {eth2 n19}
}

node n15 {
    type router
    model gNB
    network-config {
	hostname gNB4
	!
	interface eth2
	 ipv6 address 2001:1::4/64
	 ip address 192.168.72.144/24
	!
	interface eth1
	 ip address 10.0.0.7/32
	 ipv6 address 2001:0::7/128
	!
	interface eth0
	 ipv6 address 2001:2::3/64
	 ip address 192.168.70.4/24
	!
    }
    canvas c1
    iconcoords {328.0 302.0}
    labelcoords {329.0 341.0}
    interface-peer {eth0 n3}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 10.0.0.7 dev eth1
	
	
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('gnb.sh', )
	cmdup=('sh gnb.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:gnb.sh
	custom-command gnb.sh
	config {
	cp /home/core/5GinCORE/MultiplegNBS/gNB4.yaml .
	cp /home/core/UERANSIM/ . -r
	sleep 50
	./UERANSIM/build/nr-gnb -c gNB4.yaml
	}
    }
    services {DefaultRoute UserDefined}
    interface-peer {eth1 n21}
    interface-peer {eth2 n19}
}

node n16 {
    type router
    model gNB
    network-config {
	hostname gNB5
	!
	interface eth2
	 ipv6 address 2001:1::5/64
	 ip address 192.168.72.145/24
	!
	interface eth1
	 ip address 10.0.0.8/32
	 ipv6 address 2001:0::8/128
	!
	interface eth0
	 ipv6 address 2001:2::4/64
	 ip address 192.168.70.5/24
	!
    }
    canvas c1
    iconcoords {327.0 230.0}
    labelcoords {329.0 268.0}
    interface-peer {eth0 n3}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 10.0.0.8 dev eth1
	
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('gnb.sh', )
	cmdup=('sh gnb.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:gnb.sh
	custom-command gnb.sh
	config {
	cp /home/core/5GinCORE/MultiplegNBS/gNB5.yaml .
	cp /home/core/UERANSIM/ . -r
	sleep 52
	./UERANSIM/build/nr-gnb -c gNB5.yaml
	}
    }
    services {DefaultRoute UserDefined}
    interface-peer {eth1 n21}
    interface-peer {eth2 n19}
}

node n17 {
    type router
    model UE
    network-config {
	hostname UE2
	!
	interface eth0
	 ip address 10.0.0.3/32
	 ipv6 address 2001:0::3/128
	!
    }
    canvas c1
    iconcoords {102.0 369.0}
    labelcoords {103.0 409.0}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 10.0.0.3 dev eth0
	ip route add 10.0.0.0/24 via 10.0.0.3 dev eth0
	
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gran.sh', )
	startidx=
	cmdup=('sh 5gran.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gran.sh
	custom-command 5gran.sh
	config {
	cp /home/core/5GinCORE/MultiplegNBS/ue2.yaml .
	cp /home/core/UERANSIM/ . -r
	sleep 47
	./UERANSIM/build/nr-ue -c ue2.yaml
	}
    }
    custom-config {
	custom-config-id service:Docker
	custom-command Docker
	config {
	files=('startdocker.sh', 'stopdocker.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker:startdocker.sh
	custom-command startdocker.sh
	config {
	#!/bin/sh
	sleep 49
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 1
	}
    }
    services {DefaultRoute UserDefined}
    interface-peer {eth0 n21}
}

node n18 {
    type router
    model UE
    network-config {
	hostname UE3
	!
	interface eth0
	 ip address 10.0.0.5/32
	 ipv6 address 2001:0::5/128
	!
    }
    canvas c1
    iconcoords {101.0 297.0}
    labelcoords {102.0 337.0}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 10.0.0.5 dev eth0
	ip route add 10.0.0.0/24 via 10.0.0.5 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gran.sh', )
	startidx=
	cmdup=('sh 5gran.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gran.sh
	custom-command 5gran.sh
	config {
	cp /home/core/5GinCORE/MultiplegNBS/ue3.yaml .
	cp /home/core/UERANSIM/ . -r
	sleep 49
	./UERANSIM/build/nr-ue -c ue3.yaml
	}
    }
    custom-config {
	custom-config-id service:Docker
	custom-command Docker
	config {
	files=('startdocker.sh', 'stopdocker.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker:startdocker.sh
	custom-command startdocker.sh
	config {
	#!/bin/sh
	sleep 49
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 1
	}
    }
    services {DefaultRoute UserDefined}
    interface-peer {eth0 n21}
}

node n21 {
    type wlan
    network-config {
	hostname wlan21
	!
	interface wireless
	 ip address 10.0.0.0/32
	 ipv6 address 2001:0::0/128
	!
	mobmodel
	coreapi
	basic_range
	!
    }
    custom-config {
	custom-config-id basic_range
	custom-command {3 3 9 9 9}
	config {
	range=275
	bandwidth=54000000
	jitter=0
	delay=20000
	error=0
	}
    }
    canvas c1
    iconcoords {195.0 34.0}
    labelcoords {195.0 66.0}
    interface-peer {e0 n12}
    interface-peer {e1 n11}
    interface-peer {e2 n17}
    interface-peer {e3 n13}
    interface-peer {e4 n18}
    interface-peer {e5 n14}
    interface-peer {e6 n15}
    interface-peer {e7 n16}
    hidden 1
}

node n19 {
    type lanswitch
    network-config {
	hostname n19
	!
    }
    canvas c1
    iconcoords {533.0 554.0}
    labelcoords {533.0 578.0}
    interface-peer {e0 n11}
    interface-peer {e1 n13}
    interface-peer {e2 n14}
    interface-peer {e3 n15}
    interface-peer {e4 n16}
    interface-peer {e5 n2}
}

link l1 {
    nodes {n1 n3}
    bandwidth 0
}

link l2 {
    nodes {n3 n2}
    bandwidth 0
}

link l3 {
    nodes {n3 n4}
    bandwidth 0
}

link l4 {
    nodes {n3 n5}
    bandwidth 0
}

link l5 {
    nodes {n3 n6}
    bandwidth 0
}

link l6 {
    nodes {n3 n7}
    bandwidth 0
}

link l7 {
    nodes {n3 n8}
    bandwidth 0
}

link l8 {
    nodes {n3 n9}
    bandwidth 0
}

link l10 {
    nodes {n3 n11}
    bandwidth 0
}

link l14 {
    nodes {n13 n3}
    bandwidth 0
}

link l16 {
    nodes {n14 n3}
    bandwidth 0
}

link l17 {
    nodes {n3 n15}
    bandwidth 0
}

link l19 {
    nodes {n16 n3}
    bandwidth 0
}

link l12 {
    nodes {n21 n12}
}

link l21 {
    nodes {n21 n11}
}

link l11 {
    nodes {n21 n17}
}

link l13 {
    nodes {n21 n13}
}

link l15 {
    nodes {n21 n18}
}

link l18 {
    nodes {n21 n14}
}

link l20 {
    nodes {n21 n15}
}

link l22 {
    nodes {n21 n16}
}

link l23 {
    nodes {n19 n11}
    bandwidth 0
}

link l24 {
    nodes {n13 n19}
    bandwidth 0
}

link l25 {
    nodes {n14 n19}
    bandwidth 0
}

link l26 {
    nodes {n15 n19}
    bandwidth 0
}

link l27 {
    nodes {n16 n19}
    bandwidth 0
}

link l28 {
    nodes {n19 n2}
    bandwidth 0
}

link l9 {
    nodes {n2 n10}
    bandwidth 0
}

annotation a1 {
    iconcoords {419 123 1108 584}
    type rectangle
    label {5G Core Network}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #C0C0FF
    width 0
    border black
    rad 25
    effects {bold}
    canvas c1
}

annotation a6 {
    type text
    iconcoords {589.0 537.0}
    label {}
    canvas c1
}

annotation a7 {
    iconcoords {239 130 401 581}
    type rectangle
    label {5G RAN}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #ffc4ac
    width 0
    border black
    rad 25
    effects {bold}
    canvas c1
}

annotation a8 {
    iconcoords {1126 238 1295 465}
    type oval
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #cfcfd3
    width 0
    border black
    canvas c1
}

annotation a9 {
    iconcoords {1152.0 303.0}
    type text
    label {External Data}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    effects {bold}
    canvas c1
}

annotation a10 {
    iconcoords {1169.0 328.0}
    type text
    label {Network}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    effects {bold}
    canvas c1
}

annotation a11 {
    type text
    iconcoords {409.0 185.0}
    label {}
    canvas c1
}

annotation a14 {
    type text
    iconcoords {27.0 448.0}
    label {}
    canvas c1
}

annotation a15 {
    type text
    iconcoords {30.0 437.0}
    label {}
    canvas c1
}

annotation a16 {
    type text
    iconcoords {19.0 448.0}
    label {}
    canvas c1
}

annotation a17 {
    type text
    iconcoords {-7.0 451.0}
    label {}
    canvas c1
}

annotation a18 {
    type text
    iconcoords {234.0 157.0}
    label {}
    canvas c1
}

annotation a20 {
    type text
    iconcoords {16.0 469.0}
    label {}
    canvas c1
}

annotation a27 {
    iconcoords {67.0 80.0}
    type text
    label {Multiple gNBs}
    labelcolor black
    fontfamily {aakar}
    fontsize {16}
    effects {bold underline}
    canvas c1
}

annotation a28 {
    type text
    iconcoords {254.0 84.0}
    label {}
    canvas c1
}

annotation a29 {
    type text
    iconcoords {292.0 85.0}
    label {}
    canvas c1
}

annotation a30 {
    type text
    iconcoords {360.0 76.0}
    label {}
    canvas c1
}

canvas c1 {
    name {Canvas1}
    wallpaper-style {upperleft}
    wallpaper {/home/core/Desktop/Screenshot 2022-01-14 at 13.45.41.png}
    refpt {0 0 47.5791667 -122.132322 2.0}
    scale {150.0}
    size {1500 750}
}

option global {
    interface_names yes
    ip_addresses yes
    ipv6_addresses no
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid no
    traffic_start 0
}

option session {
    controlnet=
    controlnet0=
    controlnet1=
    controlnet2=
    controlnet3=
    controlnet_updown_script=
    enablerj45=1
    enablesdt=1
    ovs=0
    preservedir=0
    sdturl=tcp://127.0.0.1:50000/
}

