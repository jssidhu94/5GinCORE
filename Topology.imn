node n1 {
    type router
    model host
    network-config {
	hostname mysql
	!
	interface eth0
	 ip address 192.168.70.131/24
	!
    }
    canvas c1
    iconcoords {406.0 195.0}
    labelcoords {408.0 177.0}
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 2
	docker-compose -f ./oai-cn5g-fed/docker-compose/mysql.yaml up -d
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	#gnome-terminal
	cp /home/core/oai-cn5g-fed/ . -r
	
	./oai-cn5g-fed/scripts/syncComponents.sh
	
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.2.0/24 via 192.168.1.2 dev eth0 
	
	}
    }
    services {DefaultRoute Docker-Test SSH StaticRoute UserDefined}
    interface-peer {eth0 n3}
}

node n2 {
    type router
    model host
    network-config {
	hostname UPF
	!
	interface n6
	 ip address 192.168.73.134/24
	!
	interface n3
	 ip address 192.168.72.134/24
	!
	interface n4
	 ip address 192.168.70.134/24
	!
    }
    canvas c1
    iconcoords {650.0 526.0}
    labelcoords {650.0 558.0}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.60.0/24 via 192.168.72.141 dev n3
	
	}
    }
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 65
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 5
	docker-compose -f ./oai-cn5g-fed/docker-compose/upf.yaml up -d
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	#gnome-terminal
	cp /home/core/oai-cn5g-fed/ . -r
	
	./oai-cn5g-fed/scripts/syncComponents.sh
	
	
	}
    }
    services {DefaultRoute Docker-Test SSH StaticRoute UserDefined}
    interface-peer {eth0 n3}
    interface-peer {eth1 n11}
    interface-peer {eth2 n10}
}

node n3 {
    type lanswitch
    network-config {
	hostname Switch
	!
    }
    canvas c1
    iconcoords {649.0 320.0}
    labelcoords {649.0 344.0}
    interface-peer {e0 n1}
    interface-peer {e1 n2}
    interface-peer {e2 n4}
    interface-peer {e3 n5}
    interface-peer {e4 n6}
    interface-peer {e5 n7}
    interface-peer {e6 n8}
    interface-peer {e7 n9}
    interface-peer {e9 n11}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('wireshark.sh', )
	startidx=50
	cmdup=('bash wireshark.sh', )
	meta=
	starttime=
	}
    }
    custom-config {
	custom-config-id service:UserDefined:wireshark.sh
	custom-command wireshark.sh
	config {
	wireshark &
	}
    }
    services {UserDefined}
}

node n4 {
    type router
    model host
    network-config {
	hostname NRF
	!
	interface eth0
	 ip address 192.168.70.130/24
	!
    }
    canvas c1
    iconcoords {564.0 191.0}
    labelcoords {560.0 170.0}
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 5
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 5
	docker-compose -f ./oai-cn5g-fed/docker-compose/nrf.yaml up -d
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	#gnome-terminal
	cp /home/core/oai-cn5g-fed/ . -r
	
	./oai-cn5g-fed/scripts/syncComponents.sh
	
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.2.0/24 via 192.168.1.2 dev eth0 
	
	}
    }
    services {DefaultRoute Docker-Test SSH StaticRoute UserDefined}
    interface-peer {eth0 n3}
}

node n5 {
    type router
    model host
    network-config {
	hostname UDM
	!
	interface eth0
	 ip address 192.168.70.137/24
	!
    }
    canvas c1
    iconcoords {783.0 194.0}
    labelcoords {779.0 173.0}
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 15
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 5
	docker-compose -f ./oai-cn5g-fed/docker-compose/udm.yaml up -d
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	#gnome-terminal
	cp /home/core/oai-cn5g-fed/ . -r
	
	./oai-cn5g-fed/scripts/syncComponents.sh
	
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.2.0/24 via 192.168.1.2 dev eth0 
	
	}
    }
    services {DefaultRoute Docker-Test SSH StaticRoute UserDefined}
    interface-peer {eth0 n3}
}

node n6 {
    type router
    model host
    network-config {
	hostname UDR
	!
	interface eth0
	 ip address 192.168.70.136/24
	!
    }
    canvas c1
    iconcoords {925.0 195.0}
    labelcoords {921.0 174.0}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	sleep 75
	cp /home/core/oai-cn5g-fed/ . -r
	
	docker-compose -f ./oai-cn5g-fed/docker-compose/udr.yaml up -d
	}
    }
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 25
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 5
	docker-compose -f ./oai-cn5g-fed/docker-compose/udr.yaml up -d
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.2.0/24 via 192.168.1.2 dev eth0 
	
	}
    }
    services {DefaultRoute Docker-Test SSH StaticRoute UserDefined}
    interface-peer {eth0 n3}
}

node n7 {
    type router
    model host
    network-config {
	hostname AUSF
	!
	interface eth0
	 ip address 192.168.70.138/24
	!
    }
    canvas c1
    iconcoords {1069.0 197.0}
    labelcoords {1065.0 176.0}
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 35
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 5
	docker-compose -f ./oai-cn5g-fed/docker-compose/ausf.yaml up -d
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	#gnome-terminal
	cp /home/core/oai-cn5g-fed/ . -r
	
	./oai-cn5g-fed/scripts/syncComponents.sh
	
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.2.0/24 via 192.168.1.2 dev eth0 
	
	}
    }
    services {DefaultRoute Docker-Test SSH StaticRoute UserDefined}
    interface-peer {eth0 n3}
}

node n8 {
    type router
    model host
    network-config {
	hostname AMF
	!
	interface eth0
	 ip address 192.168.70.132/24
	!
    }
    canvas c1
    iconcoords {406.0 321.0}
    labelcoords {402.0 300.0}
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 45
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 5
	docker-compose -f ./oai-cn5g-fed/docker-compose/amf.yaml up -d
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	#gnome-terminal
	cp /home/core/oai-cn5g-fed/ . -r
	
	./oai-cn5g-fed/scripts/syncComponents.sh
	
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.2.0/24 via 192.168.1.2 dev eth0 
	
	}
    }
    services {DefaultRoute Docker-Test SSH StaticRoute UserDefined}
    interface-peer {eth0 n3}
}

node n9 {
    type router
    model host
    network-config {
	hostname SMF
	!
	interface eth0
	 ip address 192.168.70.133/24
	!
    }
    canvas c1
    iconcoords {1074.0 319.0}
    labelcoords {1070.0 298.0}
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 55
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 5
	docker-compose -f ./oai-cn5g-fed/docker-compose/smf.yaml up -d
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	#gnome-terminal
	cp /home/core/oai-cn5g-fed/ . -r
	
	./oai-cn5g-fed/scripts/syncComponents.sh
	
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.2.0/24 via 192.168.1.2 dev eth0 
	
	}
    }
    services {DefaultRoute Docker-Test SSH StaticRoute UserDefined}
    interface-peer {eth0 n3}
}

node n10 {
    type router
    model host
    network-config {
	hostname EXT-DN
	!
	interface eth0
	 ip address 192.168.73.135/24
	!
    }
    canvas c1
    iconcoords {1241.0 526.0}
    labelcoords {1241.0 558.0}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.72.0/24 via 192.168.73.134 dev eth0
	ip route add 192.168.60.0/24 via 192.168.73.134 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 75
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 5
	docker-compose -f ./oai-cn5g-fed/docker-compose/dn.yaml up -d
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	#gnome-terminal
	cp /home/core/oai-cn5g-fed/ . -r
	
	./oai-cn5g-fed/scripts/syncComponents.sh
	
	
	}
    }
    services {DefaultRoute Docker-Test SSH StaticRoute UserDefined}
    interface-peer {eth0 n2}
}

node n11 {
    type router
    model gNB
    network-config {
	hostname gNB
	!
	interface eth2
	 ip address 192.168.60.11/24
	!
	interface eth1
	 ip address 192.168.72.141/24
	!
	interface eth0
	 ip address 192.168.70.141/24
	!
    }
    canvas c1
    iconcoords {300.0 526.0}
    labelcoords {309.0 563.0}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.73.0/24 via 192.168.72.134 dev eth1
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', 'ueransim.sh', )
	cmdup=('bash ueransim.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:ueransim.sh
	custom-command ueransim.sh
	config {
	#!/bin/sh
	
	#gnome-terminal
	cp /home/core/UERANSIM/ . -r
	
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	#gnome-terminal
	cp /home/core/UERANSIM/ . -r
	
	
	}
    }
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 85
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    services {DefaultRoute SSH StaticRoute UserDefined}
    interface-peer {eth0 n3}
    interface-peer {eth1 n2}
    interface-peer {eth2 n12}
}

node n12 {
    type router
    model ue
    network-config {
	hostname UE
	!
	interface eth0
	 ip address 192.168.60.10/24
	!
    }
    canvas c1
    iconcoords {47.0 527.0}
    labelcoords {53.0 566.0}
    interface-peer {eth0 n11}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('ueransim.sh', )
	cmdup=('bash ueransim.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:ueransim.sh
	custom-command ueransim.sh
	config {
	cp /home/core/UERANSIM/ . -r
	iptables -P FORWARD ACCEPT
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.60.1
	ip route add 192.168.72.0/24 via 192.168.60.11 dev eth0
	ip route add 192.168.73.0/24 via 192.168.60.11 dev eth0
	ip route add 192.168.70.128/26 via 192.168.60.11 dev eth0
	}
    }
    services {IPForward StaticRoute UserDefined}
}

link l1 {
    nodes {n1 n3}
    bandwidth 0
}

link l2 {
    nodes {n3 n2}
    bandwidth 0
}

link l3 {
    nodes {n3 n4}
    bandwidth 0
}

link l4 {
    nodes {n3 n5}
    bandwidth 0
}

link l5 {
    nodes {n3 n6}
    bandwidth 0
}

link l6 {
    nodes {n3 n7}
    bandwidth 0
}

link l7 {
    nodes {n3 n8}
    bandwidth 0
}

link l8 {
    nodes {n3 n9}
    bandwidth 0
}

link l10 {
    nodes {n3 n11}
    bandwidth 0
}

link l11 {
    nodes {n11 n2}
    bandwidth 0
}

link l9 {
    nodes {n2 n10}
    bandwidth 0
}

link l12 {
    nodes {n12 n11}
    bandwidth 0
}

annotation a1 {
    iconcoords {345 93 1130 599}
    type rectangle
    label {5G Core Network}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #C0C0FF
    width 0
    border black
    rad 25
    effects {bold}
    canvas c1
}

annotation a2 {
    iconcoords {474.0 516.0}
    type text
    label {N3}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a3 {
    iconcoords {882.0 515.0}
    type text
    label {N6}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a4 {
    iconcoords {409.0 425.0}
    type text
    label {N1/N2}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a5 {
    iconcoords {626.0 413.0}
    type text
    label {N4}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a6 {
    type text
    iconcoords {589.0 537.0}
    label {}
    canvas c1
}

annotation a7 {
    iconcoords {165.0 377.0 339.0 592.0}
    type rectangle
    label {5G Access  Network}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #ffc4ac
    width 0
    border black
    rad 25
    effects {bold}
    canvas c1
}

canvas c1 {
    name {Canvas1}
    wallpaper-style {upperleft}
    wallpaper {/home/core/Desktop/Screenshot 2022-01-14 at 13.45.41.png}
    refpt {0 0 47.5791667 -122.132322 2.0}
    scale {150.0}
    size {1500 750}
}

option global {
    interface_names yes
    ip_addresses yes
    ipv6_addresses no
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid no
    traffic_start 0
}

option session {
    controlnet=
    controlnet0=
    controlnet1=
    controlnet2=
    controlnet3=
    controlnet_updown_script=
    enablerj45=1
    enablesdt=1
    ovs=0
    preservedir=0
    sdturl=tcp://127.0.0.1:50000/
}

