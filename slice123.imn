node n1 {
    type router
    model host
    network-config {
	hostname mySQL
	!
	interface eth0
	 ipv6 address 2001:0::19/64
	 ip address 192.168.70.131/24
	!
    }
    canvas c1
    iconcoords {423.0 183.0}
    labelcoords {421.0 164.0}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', 'mysql.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:mysql.sh
	custom-command mysql.sh
	config {
	#!/bin/sh
	
	docker-compose -f ./oai-cn5g-fed/docker-compose/mysql.yaml up -d
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	cp /home/core/5GinCORE/ . -r
	docker-compose -f ./5GinCORE/Slicing/mysql.yaml up -d
	
	
	}
    }
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 5
	docker-compose -f ./oai-cn5g-fed/docker-compose/mysql.yaml up -d
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.2.0/24 via 192.168.1.2 dev eth0 
	
	}
    }
    services {Docker UserDefined}
    interface-peer {eth0 n18}
}

node n2 {
    type router
    model host
    network-config {
	hostname NRF1
	!
	interface eth0
	 ipv6 address 2001:0::18/64
	 ip address 192.168.70.136/24
	!
    }
    canvas c1
    iconcoords {831.0 259.0}
    labelcoords {831.0 240.0}
    custom-config {
	custom-config-id service:Docker
	custom-command Docker
	config {
	files=('startdocker.sh', 'stopdocker.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker:startdocker.sh
	custom-command startdocker.sh
	config {
	#!/bin/sh
	sleep 9
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 1
	docker-compose -f ./5GinCORE/Slicing/nrf1.yaml up -d
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	#gnome-terminal
	cp /home/core/5GinCORE/ . -r
	}
    }
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 10
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 5
	docker-compose -f ./oai-cn5g-fed/docker-compose/nrf1.yaml up -d
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.2.0/24 via 192.168.1.2 dev eth0 
	
	}
    }
    services {Docker UserDefined}
    interface-peer {eth0 n18}
}

node n3 {
    type router
    model host
    network-config {
	hostname NSSF
	!
	interface eth0
	 ipv6 address 2001:0::20/64
	 ip address 192.168.70.132/24
	!
    }
    canvas c1
    iconcoords {420.0 264.0}
    labelcoords {424.0 303.0}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', 'nssf.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:nssf.sh
	custom-command nssf.sh
	config {
	#!/bin/sh
	
	docker-compose -f ./oai-cn5g-fed/docker-compose/nssf.yaml up -d
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	cp /home/core/5GinCORE/ . -r
	}
    }
    custom-config {
	custom-config-id service:Docker
	custom-command Docker
	config {
	files=('startdocker.sh', 'stopdocker.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker:startdocker.sh
	custom-command startdocker.sh
	config {
	#!/bin/sh
	sleep 4
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 1
	docker-compose -f ./5GinCORE/Slicing/nssf.yaml up -d
	}
    }
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 20
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 5
	docker-compose -f ./oai-cn5g-fed/docker-compose/nssf.yaml up -d
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.2.0/24 via 192.168.1.2 dev eth0 
	
	}
    }
    services {Docker UserDefined}
    interface-peer {eth0 n18}
}

node n4 {
    type router
    model host
    network-config {
	hostname NRF2
	!
	interface eth0
	 ipv6 address 2001:0::21/64
	 ip address 192.168.70.137/24
	!
    }
    canvas c1
    iconcoords {727.0 609.0}
    labelcoords {727.0 647.0}
    custom-config {
	custom-config-id service:Docker
	custom-command Docker
	config {
	files=('startdocker.sh', 'stopdocker.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker:startdocker.sh
	custom-command startdocker.sh
	config {
	#!/bin/sh
	sleep 14
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 1
	docker-compose -f ./5GinCORE/Slicing/nrf2.yaml up -d
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	#gnome-terminal
	cp /home/core/5GinCORE/ . -r
	}
    }
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 30
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 5
	docker-compose -f ./oai-cn5g-fed/docker-compose/nrf2.yaml up -d
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.2.0/24 via 192.168.1.2 dev eth0 
	
	}
    }
    services {Docker UserDefined}
    interface-peer {eth0 n18}
}

node n5 {
    type router
    model host
    network-config {
	hostname UPF2
	!
	interface eth0
	 ipv6 address 2001:0::22/64
	 ip address 192.168.70.143/24
	!
    }
    canvas c1
    iconcoords {1064.0 455.0}
    labelcoords {1064.0 496.0}
    custom-config {
	custom-config-id service:Docker
	custom-command Docker
	config {
	files=('startdocker.sh', 'stopdocker.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker:startdocker.sh
	custom-command startdocker.sh
	config {
	#!/bin/sh
	sleep 34
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 1
	docker-compose -f ./5GinCORE/Slicing/upf2.yaml up -d
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	#gnome-terminal
	cp /home/core/5GinCORE/ . -r
	}
    }
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 40
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 5
	docker-compose -f ./oai-cn5g-fed/docker-compose/upf2.yaml up -d
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.2.0/24 via 192.168.1.2 dev eth0 
	
	}
    }
    services {Docker UserDefined}
    interface-peer {eth0 n18}
}

node n6 {
    type router
    model host
    network-config {
	hostname UDR
	!
	interface eth0
	 ipv6 address 2001:0::23/64
	 ip address 192.168.70.133/24
	!
    }
    canvas c1
    iconcoords {584.0 85.0}
    labelcoords {581.0 64.0}
    custom-config {
	custom-config-id service:Docker
	custom-command Docker
	config {
	files=('startdocker.sh', 'stopdocker.sh', )
	cmddown=('docker-compose -f ./oai-cn5g-fed/docker-compose/Slicing/udr.yaml down', 'sh stopdocker.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker:startdocker.sh
	custom-command startdocker.sh
	config {
	#!/bin/sh
	sleep 19
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 1
	docker-compose -f ./5GinCORE/Slicing/udr.yaml up -d
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', 'udr.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:udr.sh
	custom-command udr.sh
	config {
	#!/bin/sh
	
	sleep 15
	docker-compose -f ./oai-cn5g-fed/docker-compose/udr.yaml up -d
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	cp /home/core/5GinCORE/ . -r
	}
    }
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 50
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 5
	docker-compose -f ./oai-cn5g-fed/docker-compose/udr.yaml up -d
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.2.0/24 via 192.168.1.2 dev eth0 
	
	}
    }
    services {Docker UserDefined}
    interface-peer {eth0 n18}
}

node n7 {
    type router
    model host
    network-config {
	hostname UPF3
	!
	interface eth2
	 ipv6 address 2001:2::10/64
	 ip address 192.168.72.144/24
	!
	interface eth1
	 ipv6 address 2001:1::11/64
	 ip address 192.168.73.144/24
	!
	interface eth0
	 ipv6 address 2001:0::10/64
	 ip address 192.168.70.144/24
	!
    }
    canvas c1
    iconcoords {1229.0 676.0}
    labelcoords {1226.0 717.0}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	#gnome-terminal
	cp /home/core/5GinCORE/ . -r
	}
    }
    custom-config {
	custom-config-id service:Docker
	custom-command Docker
	config {
	files=('startdocker.sh', 'stopdocker.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker:startdocker.sh
	custom-command startdocker.sh
	config {
	#!/bin/sh
	sleep 44
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 1
	docker-compose -f ./5GinCORE/Slicing/upf3.yaml up -d
	
	}
    }
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 60
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 5
	docker-compose -f ./oai-cn5g-fed/docker-compose/upf3.yaml up -d
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.2.0/24 via 192.168.1.2 dev eth0 
	
	}
    }
    services {Docker UserDefined}
    interface-peer {eth0 n18}
    interface-peer {eth1 n17}
    interface-peer {eth2 n21}
}

node n8 {
    type router
    model host
    network-config {
	hostname UDM
	!
	interface eth0
	 ipv6 address 2001:0::11/64
	 ip address 192.168.70.134/24
	!
    }
    canvas c1
    iconcoords {423.0 88.0}
    labelcoords {422.0 68.0}
    custom-config {
	custom-config-id service:Docker
	custom-command Docker
	config {
	files=('startdocker.sh', 'stopdocker.sh', )
	cmddown=('docker-compose -f ./oai-cn5g-fed/docker-compose/Slicing/udm.yaml down', 'sh stopdocker.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker:startdocker.sh
	custom-command startdocker.sh
	config {
	#!/bin/sh
	sleep 29
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 1
	docker-compose -f ./5GinCORE/Slicing/udm.yaml up -d
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	cp /home/core/5GinCORE/ . -r
	}
    }
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 70
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 5
	docker-compose -f ./oai-cn5g-fed/docker-compose/udm.yaml up -d
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.2.0/24 via 192.168.1.2 dev eth0 
	
	}
    }
    services {Docker UserDefined}
    interface-peer {eth0 n18}
}

node n9 {
    type router
    model host
    network-config {
	hostname AUSF
	!
	interface eth0
	 ipv6 address 2001:0::12/64
	 ip address 192.168.70.135/24
	!
    }
    canvas c1
    iconcoords {757.0 84.0}
    labelcoords {758.0 66.0}
    custom-config {
	custom-config-id service:Docker
	custom-command Docker
	config {
	files=('startdocker.sh', 'stopdocker.sh', )
	cmddown=('docker-compose -f ./oai-cn5g-fed/docker-compose/Slicing/ausf.yaml down', 'sh stopdocker.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker:startdocker.sh
	custom-command startdocker.sh
	config {
	#!/bin/sh
	sleep 39
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 1
	docker-compose -f ./5GinCORE/Slicing/ausf.yaml up -d
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	#gnome-terminal
	cp /home/core/5GinCORE/ . -r
	}
    }
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 80
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 5
	docker-compose -f ./oai-cn5g-fed/docker-compose/ausf_slicing.yaml up -d
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.2.0/24 via 192.168.1.2 dev eth0 
	
	}
    }
    services {Docker UserDefined}
    interface-peer {eth0 n18}
}

node n10 {
    type router
    model host
    network-config {
	hostname AMF
	!
	interface eth0
	 ipv6 address 2001:0::13/64
	 ip address 192.168.70.138/24
	!
    }
    canvas c1
    iconcoords {621.0 516.0}
    labelcoords {620.0 555.0}
    custom-config {
	custom-config-id service:Docker
	custom-command Docker
	config {
	files=('startdocker.sh', 'stopdocker.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker:startdocker.sh
	custom-command startdocker.sh
	config {
	#!/bin/sh
	sleep 54
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 1
	docker-compose -f ./5GinCORE/Slicing/amf.yaml up -d
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	#gnome-terminal
	cp /home/core/5GinCORE/ . -r
	}
    }
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 90
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 5
	docker-compose -f ./oai-cn5g-fed/docker-compose/amf_slicing.yaml up -d
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.2.0/24 via 192.168.1.2 dev eth0 
	
	}
    }
    services {Docker UserDefined}
    interface-peer {eth0 n18}
}

node n11 {
    type router
    model host
    network-config {
	hostname SMF3
	!
	interface eth0
	 ipv6 address 2001:0::14/64
	 ip address 192.168.70.141/24
	!
    }
    canvas c1
    iconcoords {990.0 606.0}
    labelcoords {990.0 647.0}
    custom-config {
	custom-config-id service:Docker
	custom-command Docker
	config {
	files=('startdocker.sh', 'stopdocker.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker:startdocker.sh
	custom-command startdocker.sh
	config {
	#!/bin/sh
	sleep 69
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 1
	docker-compose -f ./5GinCORE/Slicing/smf3.yaml up -d
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	#gnome-terminal
	cp /home/core/5GinCORE/ . -r
	}
    }
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 100
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 5
	docker-compose -f ./oai-cn5g-fed/docker-compose/smf3.yaml up -d
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.2.0/24 via 192.168.1.2 dev eth0 
	
	}
    }
    services {Docker UserDefined}
    interface-peer {eth0 n18}
}

node n12 {
    type router
    model host
    network-config {
	hostname SMF1
	!
	interface eth0
	 ipv6 address 2001:0::15/64
	 ip address 192.168.70.139/24
	!
    }
    canvas c1
    iconcoords {1202.0 259.0}
    labelcoords {1204.0 240.0}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	#gnome-terminal
	cp /home/core/5GinCORE/ . -r
	}
    }
    custom-config {
	custom-config-id service:DNSresolve
	custom-command DNSresolve
	config {
	files=('/run/resolvconf/resolv.conf', )
	}
    }
    custom-config {
	custom-config-id service:DNSresolve:/run/resolvconf/resolv.conf
	custom-command /run/resolvconf/resolv.conf
	config {
	nameserver 127.0.0.1
	
	}
    }
    custom-config {
	custom-config-id service:Docker
	custom-command Docker
	config {
	files=('startdocker.sh', 'stopdocker.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker:startdocker.sh
	custom-command startdocker.sh
	config {
	#!/bin/sh
	sleep 59
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 1
	docker-compose -f ./5GinCORE/Slicing/smf1.yaml up -d
	}
    }
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 110
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 5
	docker-compose -f ./oai-cn5g-fed/docker-compose/smf1.yaml up -d
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.2.0/24 via 192.168.1.2 dev eth0 
	
	}
    }
    services {Docker UserDefined}
    interface-peer {eth0 n18}
}

node n13 {
    type router
    model host
    network-config {
	hostname SMF2
	!
	interface eth0
	 ipv6 address 2001:0::16/64
	 ip address 192.168.70.140/24
	!
    }
    canvas c1
    iconcoords {1235.0 435.0}
    labelcoords {1250.0 472.0}
    custom-config {
	custom-config-id service:Docker
	custom-command Docker
	config {
	files=('startdocker.sh', 'stopdocker.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker:startdocker.sh
	custom-command startdocker.sh
	config {
	#!/bin/sh
	sleep 64
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 1
	docker-compose -f ./5GinCORE/Slicing/smf2.yaml up -d
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	#gnome-terminal
	cp /home/core/5GinCORE/ . -r
	}
    }
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 60
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.2.0/24 via 192.168.1.2 dev eth0 
	
	}
    }
    services {Docker UserDefined}
    interface-peer {eth0 n18}
}

node n14 {
    type router
    model host
    network-config {
	hostname UPF1
	!
	interface eth0
	 ipv6 address 2001:0::17/64
	 ip address 192.168.70.142/24
	!
    }
    canvas c1
    iconcoords {1075.0 197.0}
    labelcoords {1058.0 180.0}
    custom-config {
	custom-config-id service:Docker
	custom-command Docker
	config {
	files=('startdocker.sh', 'stopdocker.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker:startdocker.sh
	custom-command startdocker.sh
	config {
	#!/bin/sh
	sleep 24
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 1
	docker-compose -f ./5GinCORE/Slicing/upf1.yaml up -d
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	#gnome-terminal
	cp /home/core/5GinCORE/ . -r
	
	}
    }
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 65
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.2.0/24 via 192.168.1.2 dev eth0 
	
	}
    }
    services {Docker UserDefined}
    interface-peer {eth0 n18}
}

node n17 {
    type router
    model host
    network-config {
	hostname DN
	!
	interface eth1
	 ipv6 address 2001:1::10/64
	 ip address 192.168.73.145/24
	!
	interface eth0
	 ipv6 address 2001:0::24/64
	 ip address 192.168.70.145/24
	!
    }
    canvas c1
    iconcoords {1380.0 395.0}
    labelcoords {1378.0 376.0}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gc.sh', )
	cmdup=('bash 5gc.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gc.sh
	custom-command 5gc.sh
	config {
	#!/bin/sh
	
	#gnome-terminal
	cp /home/core/5GinCORE/ . -r
	}
    }
    custom-config {
	custom-config-id service:Docker
	custom-command Docker
	config {
	files=('startdocker.sh', 'stopdocker.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker:startdocker.sh
	custom-command startdocker.sh
	config {
	#!/bin/sh
	sleep 49
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 1
	docker-compose -f ./5GinCORE/Slicing/dn.yaml up -d
	}
    }
    custom-config {
	custom-config-id service:Docker-Test
	custom-command Docker-Test
	config {
	files=('myservice1.sh', 'myservice2.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker-Test:myservice1.sh
	custom-command myservice1.sh
	config {
	#!/bin/sh
	sleep 80
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 192.168.1.1
	#ip rotue add 192.168.2.0/24 via 192.168.1.2 dev eth0
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	
	ip route add 192.168.2.0/24 via 192.168.1.2 dev eth0 
	
	}
    }
    services {Docker UserDefined}
    interface-peer {eth0 n18}
    interface-peer {eth1 n7}
}

node n18 {
    type lanswitch
    network-config {
	hostname n18
	!
    }
    canvas c1
    iconcoords {727.0 395.0}
    labelcoords {727.0 419.0}
    interface-peer {e0 n7}
    interface-peer {e1 n8}
    interface-peer {e2 n9}
    interface-peer {e3 n10}
    interface-peer {e4 n11}
    interface-peer {e5 n12}
    interface-peer {e6 n13}
    interface-peer {e7 n14}
    interface-peer {e8 n2}
    interface-peer {e9 n1}
    interface-peer {e10 n3}
    interface-peer {e11 n4}
    interface-peer {e12 n5}
    interface-peer {e13 n6}
    interface-peer {e14 n19}
    interface-peer {e15 n20}
    interface-peer {e17 n17}
    interface-peer {e16 n21}
}

node n19 {
    type router
    model gNB
    network-config {
	hostname gNB1
	!
	interface eth2
	 ip address 10.0.1.2/24
	 ipv6 address 2001:6::2/64
	!
	interface eth0
	 ipv6 address 2001:0::1/64
	 ip address 192.168.70.152/24
	!
    }
    canvas c1
    iconcoords {376.0 394.0}
    labelcoords {378.0 436.0}
    interface-peer {eth0 n18}
    services {UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5gran.sh', )
	cmdup=('sh 5gran.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5gran.sh
	custom-command 5gran.sh
	config {
	cp /home/core/5GinCORE/Slicing/ran1gnb.yaml . 
	cp /home/core/UERANSIM/ . -r
	sleep 85
	./UERANSIM/build/nr-gnb -c ran1gnb.yaml
	}
    }
    custom-config {
	custom-config-id service:Docker
	custom-command Docker
	config {
	files=('startdocker.sh', 'stopdocker.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker:startdocker.sh
	custom-command startdocker.sh
	config {
	#!/bin/sh
	sleep 84
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 1
	#docker-compose -f ./oai-cn5g-fed/docker-compose/Slicing/ran1.yaml up -d
	
	}
    }
    interface-peer {eth2 n22}
}

node n20 {
    type router
    model gNB
    network-config {
	hostname gNB2
	!
	interface eth1
	 ip address 10.0.2.2/24
	 ipv6 address 2001:7::2/64
	!
	interface eth0
	 ipv6 address 2001:0::2/64
	 ip address 192.168.70.153/24
	!
    }
    canvas c1
    iconcoords {378.0 524.0}
    labelcoords {379.0 567.0}
    interface-peer {eth0 n18}
    services {}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('5grans.h', )
	cmdup=('sh 5gran.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:5grans.h
	custom-command 5grans.h
	config {
	cp /home/core/oai-cn5g-fed/ . -r
	}
    }
    custom-config {
	custom-config-id service:Docker
	custom-command Docker
	config {
	files=('startdocker.sh', 'stopdocker.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker:startdocker.sh
	custom-command startdocker.sh
	config {
	#!/bin/sh
	sleep 89
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 1
	docker-compose -f ./oai-cn5g-fed/docker-compose/Slicing/ran2.yaml up -d
	}
    }
    interface-peer {eth1 n23}
}

node n21 {
    type router
    model gNB
    network-config {
	hostname gNB3
	!
	interface eth1
	 ipv6 address 2001:2::1/64
	 ip address 192.168.72.143/24
	!
	interface eth0
	 ipv6 address 2001:0::3/64
	 ip address 192.168.70.156/24
	!
    }
    canvas c1
    iconcoords {384.0 675.0}
    labelcoords {386.0 713.0}
    services {Docker UserDefined}
    custom-config {
	custom-config-id service:Docker
	custom-command Docker
	config {
	files=('startdocker.sh', 'stopdocker.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker:startdocker.sh
	custom-command startdocker.sh
	config {
	#!/bin/sh
	sleep 74
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	sleep 1
	gnome-terminal
	#docker-compose -f ran3.yaml up -d
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('ran.sh', )
	cmdup=('sh ran.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:ran.sh
	custom-command ran.sh
	config {
	cp /home/core/5GinCORE/ . -r
	}
    }
    interface-peer {eth0 n18}
    interface-peer {eth1 n7}
}

node n22 {
    type router
    model UE
    network-config {
	hostname UE1
	!
	interface eth0
	 ip address 10.0.1.1/24
	 ipv6 address 2001:6::1/64
	!
    }
    canvas c1
    iconcoords {131.0 393.0}
    labelcoords {132.0 431.0}
    interface-peer {eth0 n19}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('ue.sh', )
	cmdup=('sh ue.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:ue.sh
	custom-command ue.sh
	config {
	cp /home/core/5GinCORE/Slicing/ran1ue.yaml .
	cp /home/core/UERANSIM/ . -r
	sleep 87
	gnome-terminal -e ./UERANSIM/build/nr-ue -c ran1ue.yaml
	
	}
    }
    custom-config {
	custom-config-id service:Docker
	custom-command Docker
	config {
	files=('startdocker.sh', 'stopdocker.sh', )
	}
    }
    custom-config {
	custom-config-id service:Docker:startdocker.sh
	custom-command startdocker.sh
	config {
	#!/bin/sh
	sleep 89
	echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf
	echo DOCKER_OPTS=\"--dns 8.8.8.8 --exec-opt native.cgroupdriver=cgroupfs -g $PWD/docker\" > /etc/default/docker
	mkdir -p docker/overlay2 
	mount -o bind /var/lib/docker/overlay2/ docker/overlay2/
	mkdir mymnt 
	mount -o bind mymnt/ docker/overlay2/mnt/
	ln -s /var/lib/docker/image/ docker/image
	CGROUP=/sys/fs/cgroup
	mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP
	for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
	do
	        mkdir $CGROUP/$SUBSYS
	        mountpoint -q $CGROUP/$SUBSYS
	        mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS
	        echo $SUBSYS | grep -q ^name= && {
	                NAME=$(echo $SUBSYS | sed s/^name=//)
	                ln -s $SUBSYS $CGROUP/$NAME
	        }
	        [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
	done
	service docker start
	
	}
    }
    services {UserDefined}
}

node n23 {
    type router
    model UE
    network-config {
	hostname UE2
	!
	interface eth0
	 ip address 10.0.2.1/24
	 ipv6 address 2001:7::1/64
	!
    }
    canvas c1
    iconcoords {132.0 523.0}
    labelcoords {132.0 564.0}
    interface-peer {eth0 n20}
}

link l1 {
    nodes {n18 n7}
    bandwidth 0
}

link l2 {
    nodes {n18 n8}
    bandwidth 0
}

link l3 {
    nodes {n18 n9}
    bandwidth 0
}

link l4 {
    nodes {n18 n10}
    bandwidth 0
}

link l5 {
    nodes {n18 n11}
    bandwidth 0
}

link l6 {
    nodes {n12 n18}
    bandwidth 0
}

link l7 {
    nodes {n13 n18}
    bandwidth 0
}

link l8 {
    nodes {n14 n18}
    bandwidth 0
}

link l9 {
    nodes {n18 n2}
    bandwidth 0
}

link l10 {
    nodes {n1 n18}
    bandwidth 0
}

link l11 {
    nodes {n3 n18}
    bandwidth 0
}

link l12 {
    nodes {n4 n18}
    bandwidth 0
}

link l13 {
    nodes {n5 n18}
    bandwidth 0
}

link l14 {
    nodes {n6 n18}
    bandwidth 0
}

link l18 {
    nodes {n19 n18}
    bandwidth 0
}

link l19 {
    nodes {n20 n18}
    bandwidth 0
}

link l23 {
    nodes {n22 n19}
    bandwidth 0
}

link l24 {
    nodes {n23 n20}
    bandwidth 0
}

link l15 {
    color Green
    nodes {n18 n17}
    bandwidth 0
}

link l16 {
    color Green
    nodes {n17 n7}
    bandwidth 0
}

link l17 {
    nodes {n21 n18}
    bandwidth 0
}

link l20 {
    color Green
    nodes {n21 n7}
    bandwidth 0
}

annotation a1 {
    iconcoords {960.0 153.0 1283.0 318.0}
    type rectangle
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #fc9c88
    width 1
    border black
    rad 0
    canvas c1
}

annotation a2 {
    iconcoords {962.0 331.0 1284.0 499.0}
    type rectangle
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #89ffff
    width 1
    border black
    rad 0
    canvas c1
}

annotation a3 {
    iconcoords {550.0 518.0 1297.0 726.0}
    type rectangle
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #ffff83
    width 1
    border black
    rad 0
    canvas c1
}

annotation a4 {
    iconcoords {548.0 144.0 1296.0 511.0}
    type rectangle
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #dcdcdc
    width 1
    border black
    rad 0
    canvas c1
}

annotation a6 {
    type text
    iconcoords {436.0 306.0}
    label {}
    canvas c1
}

annotation a7 {
    type text
    iconcoords {424.0 306.0}
    label {}
    canvas c1
}

annotation a8 {
    type text
    iconcoords {432.0 296.0}
    label {}
    canvas c1
}

annotation a9 {
    type text
    iconcoords {429.0 308.0}
    label {}
    canvas c1
}

annotation a10 {
    type text
    iconcoords {447.0 301.0}
    label {}
    canvas c1
}

annotation a11 {
    type text
    iconcoords {454.0 295.0}
    label {}
    canvas c1
}

annotation a12 {
    type text
    iconcoords {425.0 188.0}
    label {}
    canvas c1
}

annotation a13 {
    type text
    iconcoords {408.0 219.0}
    label {}
    canvas c1
}

annotation a14 {
    type text
    iconcoords {436.0 297.0}
    label {}
    canvas c1
}

annotation a16 {
    type text
    iconcoords {420.0 179.0}
    label {}
    canvas c1
}

annotation a17 {
    iconcoords {397.0 430.0}
    type text
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a20 {
    type text
    iconcoords {553.0 100.0}
    label {}
    canvas c1
}

annotation a21 {
    type text
    iconcoords {431.0 101.0}
    label {}
    canvas c1
}

annotation a22 {
    type text
    iconcoords {475.0 503.0}
    label {}
    canvas c1
}

annotation a24 {
    type text
    iconcoords {548.0 71.0}
    label {}
    canvas c1
}

annotation a25 {
    type text
    iconcoords {538.0 54.0}
    label {}
    canvas c1
}

annotation a26 {
    type text
    iconcoords {722.0 94.0}
    label {}
    canvas c1
}

annotation a27 {
    type text
    iconcoords {556.0 84.0}
    label {}
    canvas c1
}

annotation a28 {
    type text
    iconcoords {542.0 70.0}
    label {}
    canvas c1
}

annotation a29 {
    type text
    iconcoords {570.0 95.0}
    label {}
    canvas c1
}

annotation a30 {
    type text
    iconcoords {566.0 96.0}
    label {}
    canvas c1
}

annotation a31 {
    type text
    iconcoords {566.0 89.0}
    label {}
    canvas c1
}

annotation a32 {
    type text
    iconcoords {425.0 101.0}
    label {}
    canvas c1
}

annotation a33 {
    type text
    iconcoords {427.0 91.0}
    label {}
    canvas c1
}

annotation a34 {
    type text
    iconcoords {422.0 487.0}
    label {}
    canvas c1
}

annotation a35 {
    type text
    iconcoords {432.0 88.0}
    label {}
    canvas c1
}

annotation a36 {
    type text
    iconcoords {474.0 424.0}
    label {}
    canvas c1
}

annotation a37 {
    type text
    iconcoords {426.0 90.0}
    label {}
    canvas c1
}

annotation a38 {
    type text
    iconcoords {472.0 484.0}
    label {}
    canvas c1
}

annotation a39 {
    type text
    iconcoords {427.0 305.0}
    label {}
    canvas c1
}

annotation a42 {
    type text
    iconcoords {757.0 595.0}
    label {}
    canvas c1
}

annotation a43 {
    type text
    iconcoords {756.0 220.0}
    label {}
    canvas c1
}

annotation a44 {
    type text
    iconcoords {570.0 523.0}
    label {}
    canvas c1
}

annotation a45 {
    type text
    iconcoords {555.0 543.0}
    label {}
    canvas c1
}

annotation a47 {
    type text
    iconcoords {572.0 518.0}
    label {}
    canvas c1
}

annotation a48 {
    type text
    iconcoords {657.0 679.0}
    label {}
    canvas c1
}

annotation a53 {
    type text
    iconcoords {1187.0 362.0}
    label {}
    canvas c1
}

annotation a54 {
    type text
    iconcoords {1202.0 383.0}
    label {}
    canvas c1
}

annotation a57 {
    type text
    iconcoords {377.0 459.0}
    label {}
    canvas c1
}

annotation a60 {
    iconcoords {994.0 166.0}
    type text
    label {}
    labelcolor #700000
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a61 {
    type text
    iconcoords {1012.0 162.0}
    label {}
    canvas c1
}

annotation a62 {
    type text
    iconcoords {994.0 166.0}
    label {}
    canvas c1
}

annotation a63 {
    iconcoords {990.0 354.0}
    type text
    label {Slice 2}
    labelcolor black
    fontfamily {aakar}
    fontsize {14}
    effects {bold}
    canvas c1
}

annotation a78 {
    type text
    iconcoords {428.0 185.0}
    label {}
    canvas c1
}

annotation a5 {
    type text
    iconcoords {1035.0 147.0}
    label {}
    canvas c1
}

annotation a18 {
    type text
    iconcoords {1227.0 170.0}
    label {}
    canvas c1
}

annotation a19 {
    type text
    iconcoords {1055.0 464.0}
    label {}
    canvas c1
}

annotation a23 {
    type text
    iconcoords {1038.0 674.0}
    label {}
    canvas c1
}

annotation a40 {
    type text
    iconcoords {1073.0 460.0}
    label {}
    canvas c1
}

annotation a41 {
    type text
    iconcoords {1067.0 201.0}
    label {}
    canvas c1
}

annotation a46 {
    type text
    iconcoords {811.0 239.0}
    label {}
    canvas c1
}

annotation a49 {
    type text
    iconcoords {1061.0 206.0}
    label {}
    canvas c1
}

annotation a50 {
    type text
    iconcoords {1202.0 395.0}
    label {}
    canvas c1
}

annotation a15 {
    type text
    iconcoords {1068.0 198.0}
    label {}
    canvas c1
}

annotation a51 {
    type text
    iconcoords {1054.0 98.0}
    label {}
    canvas c1
}

annotation a52 {
    type text
    iconcoords {1248.0 330.0}
    label {}
    canvas c1
}

annotation a55 {
    type text
    iconcoords {1040.0 244.0}
    label {}
    canvas c1
}

annotation a56 {
    type text
    iconcoords {1014.0 195.0}
    label {}
    canvas c1
}

annotation a58 {
    type text
    iconcoords {1010.0 211.0}
    label {}
    canvas c1
}

annotation a59 {
    type text
    iconcoords {747.0 372.0}
    label {}
    canvas c1
}

annotation a68 {
    type text
    iconcoords {736.0 604.0}
    label {}
    canvas c1
}

annotation a69 {
    type text
    iconcoords {743.0 85.0}
    label {}
    canvas c1
}

annotation a70 {
    type text
    iconcoords {572.0 85.0}
    label {}
    canvas c1
}

annotation a71 {
    type text
    iconcoords {1203.0 371.0}
    label {}
    canvas c1
}

annotation a72 {
    type text
    iconcoords {1204.0 567.0}
    label {}
    canvas c1
}

annotation a73 {
    iconcoords {1186.0 178.0}
    type text
    label {Slice 1}
    labelcolor black
    fontfamily {aakar}
    fontsize {14}
    effects {bold}
    canvas c1
}

annotation a64 {
    iconcoords {993.0 555.0}
    type text
    label {Slice 3}
    labelcolor black
    fontfamily {aakar}
    fontsize {16}
    effects {bold}
    canvas c1
}

annotation a74 {
    type text
    iconcoords {1032.0 550.0}
    label {}
    canvas c1
}

annotation a79 {
    type text
    iconcoords {759.0 369.0}
    label {}
    canvas c1
}

annotation a80 {
    type text
    iconcoords {757.0 89.0}
    label {}
    canvas c1
}

annotation a81 {
    type text
    iconcoords {748.0 593.0}
    label {}
    canvas c1
}

annotation a82 {
    type text
    iconcoords {593.0 80.0}
    label {}
    canvas c1
}

annotation a83 {
    type text
    iconcoords {414.0 88.0}
    label {}
    canvas c1
}

annotation a84 {
    type text
    iconcoords {430.0 185.0}
    label {}
    canvas c1
}

annotation a85 {
    type text
    iconcoords {421.0 276.0}
    label {}
    canvas c1
}

annotation a86 {
    type text
    iconcoords {587.0 87.0}
    label {}
    canvas c1
}

annotation a87 {
    type text
    iconcoords {584.0 79.0}
    label {}
    canvas c1
}

annotation a88 {
    type text
    iconcoords {426.0 86.0}
    label {}
    canvas c1
}

annotation a89 {
    type text
    iconcoords {1069.0 458.0}
    label {}
    canvas c1
}

annotation a91 {
    type text
    iconcoords {151.0 495.0}
    label {}
    canvas c1
}

annotation a92 {
    type text
    iconcoords {154.0 478.0}
    label {}
    canvas c1
}

annotation a90 {
    iconcoords {330.0 312.0 441.0 727.0}
    type rectangle
    label {RAN}
    labelcolor black
    fontfamily {aakar}
    fontsize {12}
    color #ffd9fe
    width 1
    border black
    rad 0
    effects {bold}
    canvas c1
}

annotation a66 {
    iconcoords {1314.0 309.0 1448.0 513.0}
    type oval
    label {}
    labelcolor black
    fontfamily {aakar}
    fontsize {12}
    color #CFCFFF
    width 0
    border black
    effects {bold}
    canvas c1
}

annotation a67 {
    iconcoords {1360.0 454.0}
    type text
    label {Data}
    labelcolor black
    fontfamily {aakar}
    fontsize {12}
    effects {bold}
    canvas c1
}

annotation a75 {
    iconcoords {1350.0 473.0}
    type text
    label {Network}
    labelcolor black
    fontfamily {aakar}
    fontsize {12}
    effects {bold}
    canvas c1
}

annotation a76 {
    iconcoords {334.0 705.0}
    type text
    label {UE3/}
    labelcolor #0000ff
    fontfamily {Arial}
    fontsize {11}
    canvas c1
}

annotation a77 {
    type text
    iconcoords {398.0 707.0}
    label {}
    canvas c1
}

annotation a93 {
    type text
    iconcoords {265.0 633.0}
    label {}
    canvas c1
}

annotation a94 {
    iconcoords {102.0 35.0}
    type text
    label {Network Slicing in 5G SA}
    labelcolor black
    fontfamily {aakar}
    fontsize {16}
    effects {bold underline}
    canvas c1
}

annotation a95 {
    iconcoords {1287 7 1443 50}
    type oval
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #fc9c88
    width 0
    border black
    canvas c1
}

annotation a96 {
    iconcoords {1288.0 52.0 1443.0 97.0}
    type oval
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #89ffff
    width 0
    border black
    canvas c1
}

annotation a97 {
    iconcoords {1294.0 103.0 1445.0 152.0}
    type oval
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #ffff83
    width 0
    border black
    canvas c1
}

annotation a99 {
    iconcoords {1344.0 20.0}
    type text
    label {sst=2}
    labelcolor black
    fontfamily {aakar}
    fontsize {12}
    effects {bold}
    canvas c1
}

annotation a98 {
    iconcoords {1344.0 35.0}
    type text
    label {sd=2}
    labelcolor black
    fontfamily {aakar}
    fontsize {12}
    effects {bold}
    canvas c1
}

annotation a100 {
    iconcoords {1349.0 82.0}
    type text
    label {sd=3}
    labelcolor black
    fontfamily {aakar}
    fontsize {12}
    effects {bold}
    canvas c1
}

annotation a101 {
    iconcoords {1348.0 66.0}
    type text
    label {sst=3}
    labelcolor black
    fontfamily {aakar}
    fontsize {12}
    effects {bold}
    canvas c1
}

annotation a102 {
    iconcoords {1352.0 134.0}
    type text
    label {sd=4}
    labelcolor black
    fontfamily {aakar}
    fontsize {12}
    effects {bold}
    canvas c1
}

annotation a103 {
    iconcoords {1350.0 119.0}
    type text
    label {sst=3}
    labelcolor black
    fontfamily {aakar}
    fontsize {12}
    effects {bold}
    canvas c1
}

annotation a104 {
    iconcoords {84.0 356.0 407.0 434.0}
    type oval
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #fc9c88
    width 0
    border black
    canvas c1
}

annotation a106 {
    iconcoords {89.0 481.0 426.0 572.0}
    type oval
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #89ffff
    width 0
    border black
    canvas c1
}

annotation a107 {
    iconcoords {239 639 406 704}
    type oval
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #ffff83
    width 0
    border black
    canvas c1
}

annotation a65 {
    iconcoords {290.0 674.0}
    type text
    label {UE----gNB}
    labelcolor black
    fontfamily {Arial}
    fontsize 12
    canvas c1
}

canvas c1 {
    name {Canvas1}
    refpt {10 0 47.5791667 -122.132322 2.0}
    scale {150.0}
    size {2000 825}
}

option global {
    interface_names yes
    ip_addresses yes
    ipv6_addresses no
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid no
    traffic_start 0
}

option session {
    controlnet=
    controlnet0=
    controlnet1=
    controlnet2=
    controlnet3=
    controlnet_updown_script=
    enablerj45=1
    enablesdt=1
    ovs=0
    preservedir=0
    sdturl=tcp://127.0.0.1:50000/
}

